# request_ia.py

import os
import google.generativeai as genai
import json
import markdown  # Importar a biblioteca markdown

# Configurar a API Key de forma segura
GENAI_API_KEY = os.environ.get("GENAI_API_KEY")  # Defina essa vari√°vel no seu ambiente

if not GENAI_API_KEY:
    raise ValueError("A vari√°vel de ambiente 'GENAI_API_KEY' n√£o est√° definida.")

genai.configure(api_key=GENAI_API_KEY)

# Configura√ß√£o do modelo
generation_config = {
    "temperature": 0.7,  # Ajuste conforme necess√°rio
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 1500,  # Ajuste conforme a necessidade
    "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=generation_config,
)

def analyze_performance(metrica, info_aluno):
    """
    Envia os dados de m√©tricas e informa√ß√µes do aluno para a IA e retorna a an√°lise em HTML.

    :param metrica: Dicion√°rio contendo as m√©tricas de desempenho.
    :param info_aluno: Dicion√°rio contendo as informa√ß√µes do aluno.
    :return: String com a an√°lise gerada pela IA em HTML.
    """
    try:
        # Construir o prompt conforme especifica√ß√µes
        prompt_instructions = (
        "Por favor, fa√ßa uma an√°lise abrangente e detalhada do desempenho acad√™mico fornecido com base nas informa√ß√µes seguintes. "
        "A an√°lise deve ser adequada para uma interface de aplicativo e incluir os seguintes elementos, cada um come√ßando com um t√≠tulo de se√ß√£o em negrito e acompanhado de um emoji relevante dentro de um par√°grafo HTML (<p><strong>üìä T√≠tulo da Se√ß√£o</strong></p>):\n\n"
        "1. Vis√£o geral do desempenho, incluindo a m√©dia global (em porcentagem).\n"
        "2. Evolu√ß√£o do desempenho entre os per√≠odos, considerando m√©tricas relevantes (m√©dias sempre ser√£o em porcentagem).\n"
        "3. An√°lise dos pontos fortes com emojis (sempre enviar as notas e lembre-se que as notas s√£o n√∫meros inteiros e n√£o porcentagem).\n"
        "4. √Åreas para melhoria com recomenda√ß√µes pr√°ticas e emojis (sempre enviar as notas e lembre-se que as notas s√£o n√∫meros inteiros e n√£o porcentagem).\n"
        "5. Avalia√ß√£o da consist√™ncia das notas.\n"
        "6. Diferencia√ß√£o entre habilidades pr√°ticas e te√≥ricas.\n"
        "7. Sugest√µes pr√°ticas para melhorias e uso de emojis para manter o texto leve.\n"
        "8. Destacar os pontos fortes e positivos a serem mantidos.\n\n"
        "O texto deve ser envolvente, conciso e utilizar uma linguagem que motive o usu√°rio, incluindo o uso de emojis e frases curtas.\n\n"
        "Utilize a refer√™ncia: M√©dia do Per√≠odo ou Global abaixo de 75% n√£o √© bom (n√£o cite essa frase diretamente).\n\n"
        "Utilize t√≥picos, mas n√£o exagere para n√£o poluir a visualiza√ß√£o.\n\n"
        "**Formata√ß√£o HTML:**\n"
        "- Cada se√ß√£o deve come√ßar com um par√°grafo contendo o t√≠tulo da se√ß√£o em negrito e acompanhado de um emoji relevante. Exemplo:\n"
        "  `<p><strong>üìä Vis√£o Geral do Desempenho</strong></p>`\n"
        "- O conte√∫do de cada se√ß√£o deve estar imediatamente abaixo do t√≠tulo correspondente, utilizando tags HTML apropriadas, como `<p>`, `<ul>`, `<li>`, etc.\n\n"
        "- **Evite** utilizar delimitadores de blocos de c√≥digo como ```html no in√≠cio e ``` no final da sa√≠da.\n\n"
        "A sa√≠da deve ser apenas o HTML necess√°rio para renderizar as se√ß√µes corretamente no seu aplicativo.\n\n"
        "Aqui est√£o os dados para an√°lise:\n"
        )

        # Serializar os dados para inclus√£o no prompt
        dados_json = json.dumps({
            'metrica': metrica,
            'info_aluno': info_aluno
        }, ensure_ascii=False, indent=4)

        prompt = f"{prompt_instructions}{dados_json}"

        # Iniciar a sess√£o de chat
        chat_session = model.start_chat(
            history=[]
        )

        # Enviar a mensagem para a IA
        response = chat_session.send_message(prompt)

        # Obter o texto da resposta
        resposta_texto = response.text

        # Converter Markdown para HTML
        resposta_html = markdown.markdown(resposta_texto)

        return resposta_html

    except Exception as e:
        # Tratar poss√≠veis erros
        return f"<p>Ocorreu um erro ao processar a an√°lise: {str(e)}</p>"