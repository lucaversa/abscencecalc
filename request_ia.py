# request_ia.py

import logging
import os
import re
import google.generativeai as genai
import json
import markdown  # Importar a biblioteca markdown

# Configurar a API Key de forma segura
# GENAI_API_KEY = os.environ.get("GENAI_API_KEY")
GENAI_API_KEY = "AIzaSyDngoemSHtclSXsoVlZe1Vnz50a8o7AcEg"  # Defina essa vari√°vel no seu ambiente

if not GENAI_API_KEY:
    raise ValueError("A vari√°vel de ambiente 'GENAI_API_KEY' n√£o est√° definida.")

genai.configure(api_key=GENAI_API_KEY)

# Configura√ß√£o do modelo
generation_config = {
    "temperature": 0.7,  # Ajuste conforme necess√°rio
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 5500,  # Ajuste conforme a necessidade
    "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=generation_config,
)

def analyze_performance(metrica, info_aluno):
    """
    Envia os dados de m√©tricas e informa√ß√µes do aluno para a IA e retorna a an√°lise em HTML.

    :param metrica: Dicion√°rio contendo as m√©tricas de desempenho.
    :param info_aluno: Dicion√°rio contendo as informa√ß√µes do aluno.
    :return: String com a an√°lise gerada pela IA em HTML.
    """
    try:
        # Construir o prompt conforme especifica√ß√µes
        prompt_instructions = (
            "Por favor, fa√ßa uma an√°lise abrangente e detalhada do desempenho acad√™mico fornecido com base nas informa√ß√µes seguintes. "
            "A an√°lise deve ser adequada para uma interface de aplicativo e incluir os seguintes elementos, cada um come√ßando com um t√≠tulo de se√ß√£o em negrito e acompanhado de um emoji relevante dentro de um par√°grafo HTML (<p><strong>üìä T√≠tulo da Se√ß√£o</strong></p>):\n\n"
            "1. Vis√£o geral do desempenho, incluindo a m√©dia global. \n"
            "   - **Nota:** Ao calcular a m√©dia global, considere todas as disciplinas, inclusive aquelas com per√≠odo maior que 12.\n"
            "2. Evolu√ß√£o do desempenho entre os per√≠odos, considerando m√©tricas relevantes.\n"
            "   - **Nota:** Para esta e todas as demais an√°lises, desconsidere quaisquer disciplinas com per√≠odo maior que 12.\n"
            "3. An√°lise dos pontos e √°reas fortes com emojis (sempre enviar as notas e lembre-se que as notas s√£o n√∫meros inteiros e n√£o porcentagem).\n"
            "4. √Åreas para melhoria com recomenda√ß√µes pr√°ticas e emojis (sempre enviar as notas e lembre-se que as notas s√£o n√∫meros inteiros e n√£o porcentagem). Considere uma √°rea para melhoria apenas aquelas disciplinas em que a nota for menor que 65.\n"
            "5. Avalia√ß√£o da consist√™ncia das notas.\n"
            "6. Diferencia√ß√£o entre habilidades pr√°ticas e te√≥ricas.\n"
            "7. Sugest√µes pr√°ticas para melhorias e uso de emojis para manter o texto leve.\n"
            "8. Destacar os pontos fortes e positivos a serem mantidos.\n\n"
            "O texto deve ser envolvente, conciso e utilizar uma linguagem que motive o usu√°rio, incluindo o uso de emojis e frases curtas.\n\n"
            "- Utilize como refer√™ncia: o ideal √© a m√©dia do per√≠odo ou global ser acima de 75 (n√£o cite essa frase diretamente).\n\n"
            "- Utilize t√≥picos, mas n√£o exagere para n√£o poluir a visualiza√ß√£o.\n\n"
            "- N√ÉO UTILIZE asteriscos em nenhuma parte do texto.\n\n"
            "**Formata√ß√£o HTML:**\n"
            "- Cada se√ß√£o deve come√ßar com um par√°grafo contendo o t√≠tulo da se√ß√£o em negrito e acompanhado de um emoji relevante. Exemplo:\n"
            "  `<p><strong>üìä Vis√£o Geral do Desempenho</strong></p>`\n"
            "- O conte√∫do de cada se√ß√£o deve estar imediatamente abaixo do t√≠tulo correspondente, utilizando tags HTML apropriadas, como `<p>`, `<ul>`, `<li>`, etc.\n\n"
            "- **N√ÉO UTILIZE SOB NENHUMA HIP√ìTESE** delimitadores de blocos de c√≥digo como ```html no in√≠cio e ``` no final da sa√≠da.\n\n"
            "A sa√≠da deve ser apenas o HTML necess√°rio para renderizar as se√ß√µes corretamente no seu aplicativo.\n\n"
            "Aqui est√£o os dados para an√°lise:\n"
        )

        # Serializar os dados para inclus√£o no prompt
        dados_json = json.dumps({
            'metrica': metrica,
            'info_aluno': info_aluno
        }, ensure_ascii=False, indent=4)

        prompt = f"{prompt_instructions}{dados_json}"

        # Iniciar a sess√£o de chat
        chat_session = model.start_chat(
            history=[]
        )

        # Enviar a mensagem para a IA
        response = chat_session.send_message(prompt)

        # Obter o texto da resposta
        resposta_texto = response.text

        # Converter Markdown para HTML
        resposta_html = markdown.markdown(resposta_texto)

        return resposta_html

    except Exception as e:
        logging.error(f"Erro na an√°lise da performance: {str(e)}")
        return {
            "error": True,
            "message": f"Ocorreu um erro ao analisar a performance: {str(e)}"
        }

def analyze_curriculo(metrica, info_aluno, extensao, eventos_sus, cursos_aperfeicoamento, 
                     monitoria, pesquisa_ic, eventos_regionais, eventos_nacionais, 
                     artigos_nao_indexados, artigos_doi, congressos, representacao_estudantil,
                     ligas_academicas, lingua_estrangeira, pet_saude, estagio_nao_obrigatorio):
    try:
        # Construir o prompt base com formato JSON expl√≠cito
        prompt_instructions = (
            "Analise os dados abaixo e calcule a pontua√ß√£o total do usu√°rio (m√°ximo 100 pontos)."
            "\n\n"
            "IMPORTANTE: N√ÉO utilize asteriscos em sua resposta."
            "\n"
            "Nota: n√£o √© necess√°rio citar diretamente o nome do usu√°rio."
            "\n"
            "IMPORTANTE: Retorne APENAS o JSON puro, sem usar marcadores de c√≥digo como ```json ou ```."
            "\n"
            "Use APENAS aspas duplas (\") para strings no JSON, nunca aspas simples (')."
            "\n\n"
            "FORNE√áA AS STRINGS DO JSON ESCAPANDO TODAS AS ASPAS INTERNAS COM \\\"."
            "\n\n"
            "A resposta deve seguir exatamente o seguinte formato JSON:"
            "\n"
            "{"
            "\n  \"valor_curriculo\": <n√∫mero>,"
            "\n  \"feedback_geral\": \"<An√°lise geral do curr√≠culo com: Avalia√ß√£o geral e principais √°reas para foco. Use emojis adequados üìö‚ú®>\","
            "\n  \"componentes\": ["
            "\n    {"
            "\n      \"nome\": \"<nome>\","
            "\n      \"pontuacao_obtida\": <n√∫mero>,"
            "\n      \"pontuacao_maxima\": <n√∫mero>,"
            "\n      \"feedback\": \"<An√°lise detalhada individual do componente de acordo com a pontua√ß√£o.>\""
            "\n    }"
            "\n  ]"
            "\n}"
            "\n\n"
            "Cada componente deve seguir as regras abaixo e n√£o pode exceder a pontua√ß√£o m√°xima definida."
            "\n\n"
            "Componentes e Regras de Pontua√ß√£o:"
        )

        # Adicionar cada componente com suas regras
        componentes = [
            {
                "nome": "HIST√ìRICO ESCOLAR",
                "valor": f"{metrica}, {info_aluno}",
                "pontuacao_maxima": 50,
                "regra": (
                    "50 pontos: 50% ou mais de men√ß√µes A/SS ou notas 9-10;"
                    "40 pontos: 50% ou mais de men√ß√µes A-B/SS-MS ou notas 7-10;"
                    "30 pontos: 50% ou mais de men√ß√µes A,B,C/SS,MS,MM ou notas 5-10."
                    "Na an√°lise individual deste componente, cite a frequ√™ncia de notas do candidato."
                )
            },
            {
                "nome": "PROGRAMA DE EXTENS√ÉO",
                "valor": extensao,
                "pontuacao_maxima": 8,
                "regra": "4 pontos por programa/projeto (m√≠nimo 30h cada). Exceto ligas acad√™micas e cursos de extens√£o."
            },
            {
                "nome": "EVENTOS SUS",
                "valor": eventos_sus,
                "pontuacao_maxima": 1,
                "regra": "0,25 pontos por evento (m√≠nimo 20h)."
            },
            {
                "nome": "CURSOS DE APERFEI√áOAMENTO",
                "valor": cursos_aperfeicoamento,
                "pontuacao_maxima": 2,
                "regra": "0,5 pontos por curso (m√≠nimo 180h)."
            },
            {
                "nome": "MONITORIA",
                "valor": str(monitoria) + " semestres",
                "pontuacao_maxima": 9,
                "regra": "3 pontos por semestre."
            },
            {
                "nome": "PESQUISA/INICIA√á√ÉO CIENT√çFICA",
                "valor": pesquisa_ic,
                "pontuacao_maxima": 12,
                "regra": "6 pontos por atividade."
            },
            {
                "nome": "APRESENTA√á√ÉO EM EVENTOS CIENT√çFICOS REGIONAIS",
                "valor": eventos_regionais,
                "pontuacao_maxima": 1.5,
                "regra": "0,3 pontos por trabalho."
            },
            {
                "nome": "APRESENTA√á√ÉO EM EVENTOS CIENT√çFICOS NACIONAIS",
                "valor": eventos_nacionais,
                "pontuacao_maxima": 1.5,
                "regra": "0,5 pontos por trabalho."
            },
            {
                "nome": "ARTIGOS EM PERI√ìDICOS N√ÉO INDEXADOS",
                "valor": artigos_nao_indexados,
                "pontuacao_maxima": 3,
                "regra": "1 ponto por trabalho."
            },
            {
                "nome": "ARTIGOS COM DOI",
                "valor": artigos_doi,
                "pontuacao_maxima": 4.5,
                "regra": "1,5 pontos por trabalho."
            },
            {
                "nome": "PARTICIPA√á√ÉO EM CONGRESSOS",
                "valor": congressos,
                "pontuacao_maxima": 0.5,
                "regra": "0,1 ponto por evento."
            },
            {
                "nome": "REPRESENTA√á√ÉO ESTUDANTIL",
                "valor": representacao_estudantil,
                "pontuacao_maxima": 2,
                "regra": "1 ponto por atividade."
            },
            {
                "nome": "LIGAS ACAD√äMICAS",
                "valor": ligas_academicas,
                "pontuacao_maxima": 1,
                "regra": "0,5 pontos por liga."
            },
            {
                "nome": "L√çNGUA ESTRANGEIRA",
                "valor": lingua_estrangeira,
                "pontuacao_maxima": 1,
                "regra": "1 ponto por l√≠ngua."
            },
            {
                "nome": "PET SA√öDE/PET MEC",
                "valor": pet_saude,
                "pontuacao_maxima": 2,
                "regra": "1 ponto por ano."
            },
            {
                "nome": "EST√ÅGIO N√ÉO OBRIGAT√ìRIO",
                "valor": str(estagio_nao_obrigatorio) + " horas",
                "pontuacao_maxima": 1,
                "regra": "1 ponto a cada 180 HORAS REALIZADAS. ATEN√á√ÉO: se o usu√°rio informar MENOS que 180 horas a pontua√ß√£o √© ZERO."
            }
        ]

        for componente in componentes:
            prompt_instructions += (
                f"\n- **{componente['nome']}** (m√°ximo {componente['pontuacao_maxima']} pontos)"
                f"\n  Regras: {componente['regra']}"
                f"\n  Valor: {componente['valor']}"
            )

        prompt_instructions += (
            "\n\n**Regras Adicionais:**"
            "\n- A pontua√ß√£o obtida para cada componente n√£o pode exceder a pontua√ß√£o m√°xima definida."
            "\n- A pontua√ß√£o total do curr√≠culo n√£o pode exceder 100 pontos."
            "\n\nForne√ßa a resposta em formato JSON v√°lido conforme especificado acima."
        )

        # Iniciar a sess√£o de chat
        chat_session = model.start_chat(history=[])

        # Enviar a mensagem para a IA
        response = chat_session.send_message(prompt_instructions)

        # Fun√ß√£o para limpar a resposta JSON
        def clean_json_response(response_text):
            # Remover marcadores de c√≥digo se presentes
            text = response_text.strip()
            if text.startswith('```'):
                # Remove qualquer varia√ß√£o de ``` no in√≠cio (```json, ```JSON, etc)
                text = re.sub(r'^```(?:json)?\s*', '', text)
            if text.endswith('```'):
                text = re.sub(r'```$', '', text)
            
            # Substituir aspas simples por aspas duplas, mas apenas quando forem delimitadores de strings
            text = re.sub(r"(?<!\\)'([^']*(?:\\.[^']*)*)'", r'"\1"', text)
            
            return text

        # Limpar e processar a resposta
        cleaned_response = clean_json_response(response.text)
        
        try:
            resultado = json.loads(cleaned_response)
            # Validar se o JSON est√° no formato esperado
            required_keys = {'valor_curriculo', 'feedback_geral', 'componentes'}
            if not all(key in resultado for key in required_keys):
                raise ValueError("JSON n√£o cont√©m todas as chaves requeridas")
            
            # Validar e ajustar pontua√ß√µes
            total_pontuacao = 0
            for componente in resultado['componentes']:
                if componente['pontuacao_obtida'] > componente['pontuacao_maxima']:
                    logging.warning(
                        f"Pontua√ß√£o do componente {componente['nome']} excede o m√°ximo. Ajustando de {componente['pontuacao_obtida']} para {componente['pontuacao_maxima']}."
                    )
                    componente['pontuacao_obtida'] = componente['pontuacao_maxima']
                total_pontuacao += componente['pontuacao_obtida']
            
            if total_pontuacao > 100:
                logging.warning(
                    f"Pontua√ß√£o total excede 100. Ajustando de {total_pontuacao} para 100."
                )
                resultado['valor_curriculo'] = 100
            else:
                resultado['valor_curriculo'] = total_pontuacao
            
            return resultado
                
        except json.JSONDecodeError as e:
            logging.error(f"Erro ao decodificar JSON: {str(e)}\nResposta recebida: {cleaned_response}")
            raise ValueError(f"A resposta da IA n√£o est√° no formato JSON esperado: {str(e)}")
    
    except Exception as e:
        logging.error(f"Erro na an√°lise do curr√≠culo: {str(e)}")
        return {
            "error": True,
            "message": f"Ocorreu um erro ao analisar o curr√≠culo: {str(e)}"
        }

def processar_analisar_curriculo_feluma(
    media_curricular,
    
    projeto_pesquisa,
    projeto_extensao,
    estagio_nao_obrigatorio,
    monitoria_pid,
    diretoria_liga,
    membro_liga,
    projeto_comunidade,
    
    doutorado_mestrado,
    residencia_pos_hospitalar,
    primeira_especializacao,
    segunda_especializacao,
    
    curso_acls,
    curso_pals,
    curso_atls,
    curso_also,
    curso_phtls,
    curso_bls,
    
    primeira_publicacao_artigo,
    segunda_publicacao_artigo,
    primeiro_capitulo_livro,
    segundo_capitulo_livro,
    primeira_organizacao_livro,
    segunda_organizacao_livro,
    
    primeira_comissao_organizadora,
    segunda_comissao_organizadora,
    primeira_premiacao,
    segunda_premiacao,
    primeira_palestra,
    segunda_palestra,
    apresentacao_trabalho,
    
    proficiencia_ingles,
    proficiencia_outra_lingua,
    proficiencia_portugues
):
    try:
        resultado = {
            "valor_curriculo": 0,
            "feedback_geral": "",
            "grupos": []
        }
        
        total_pontuacao = 0
        
        # Grupo 1 - Aproveitamento Curricular
        grupo1_max = 2.0
        if media_curricular >= 90.00:
            pontuacao_grupo1 = 2.0
        elif media_curricular >= 80.00:
            pontuacao_grupo1 = 1.0
        else:
            pontuacao_grupo1 = 0.0
        
        componentes_grupo1 = [
            {
                "nome": "M√©dia Curricular",
                "valor": media_curricular,
                "pontuacao": pontuacao_grupo1
            }
        ]
        
        resultado['grupos'].append({
            "nome": "APROVEITAMENTO CURRICULAR NO CURSO DE GRADUA√á√ÉO EM MEDICINA",
            "pontuacao_obtida": pontuacao_grupo1,
            "pontuacao_maxima": grupo1_max,
            "componentes": componentes_grupo1,
            "feedback": ""  # Ser√° preenchido pela IA
        })
        total_pontuacao += pontuacao_grupo1
        
        # Grupo 2 - Aproveitamento Extracurricular
        grupo2_max = 2.0
        pontuacao_grupo2 = 0.0
        componentes_grupo2 = [
            {
                "nome": "Participa√ß√£o em projeto de pesquisa com dura√ß√£o m√≠nima de 06 meses",
                "valor": projeto_pesquisa,
                "pontuacao": 1.0 if projeto_pesquisa else 0.0
            },
            {
                "nome": "Participa√ß√£o em projeto de extens√£o com carga hor√°ria m√≠nima de 80 horas",
                "valor": projeto_extensao,
                "pontuacao": 1.0 if projeto_extensao else 0.0
            },
            {
                "nome": "Est√°gio n√£o obrigat√≥rio com dura√ß√£o m√≠nima de 04 meses",
                "valor": estagio_nao_obrigatorio,
                "pontuacao": 0.6 if estagio_nao_obrigatorio else 0.0
            },
            {
                "nome": "Monitoria ou PID com dura√ß√£o m√≠nima de 03 meses",
                "valor": monitoria_pid,
                "pontuacao": 0.6 if monitoria_pid else 0.0
            },
            {
                "nome": "Participa√ß√£o em diretorias de ligas acad√™micas com dura√ß√£o m√≠nima de 12 meses",
                "valor": diretoria_liga,
                "pontuacao": 0.3 if diretoria_liga else 0.0
            },
            {
                "nome": "Participa√ß√£o como membro/ligante em ligas acad√™micas com dura√ß√£o m√≠nima de 12 meses",
                "valor": membro_liga,
                "pontuacao": 0.1 if membro_liga else 0.0
            },
            {
                "nome": "Participa√ß√£o volunt√°ria em projeto junto √† comunidade com dura√ß√£o m√≠nima de 08 horas",
                "valor": projeto_comunidade,
                "pontuacao": 0.1 if projeto_comunidade else 0.0
            }
        ]
        
        # Calcular a pontua√ß√£o do grupo 2
        for componente in componentes_grupo2:
            pontuacao_grupo2 += componente['pontuacao']
        
        pontuacao_grupo2 = min(pontuacao_grupo2, grupo2_max)
        
        # Atualizar os componentes para refletir a pontua√ß√£o limitada
        if pontuacao_grupo2 < sum(c['pontuacao'] for c in componentes_grupo2):
            fator = pontuacao_grupo2 / sum(c['pontuacao'] for c in componentes_grupo2) if sum(c['pontuacao'] for c in componentes_grupo2) > 0 else 1
            for componente in componentes_grupo2:
                componente['pontuacao'] = round(componente['pontuacao'] * fator, 2)
        
        resultado['grupos'].append({
            "nome": "APROVEITAMENTO EXTRACURRICULAR NO CURSO DE GRADUA√á√ÉO EM MEDICINA",
            "pontuacao_obtida": pontuacao_grupo2,
            "pontuacao_maxima": grupo2_max,
            "componentes": componentes_grupo2,
            "feedback": ""  # Ser√° preenchido pela IA
        })
        total_pontuacao += pontuacao_grupo2
        
        # Grupo 3 - Stricto Sensu, Resid√™ncia, P√≥s-gradua√ß√£o
        grupo3_max = 1.0
        pontuacao_grupo3 = 0.0
        componentes_grupo3 = [
            {
                "nome": "Doutorado / Mestrado",
                "valor": doutorado_mestrado,
                "pontuacao": 1.0 if doutorado_mestrado else 0.0
            },
            {
                "nome": "Resid√™ncia M√©dica ou P√≥s-Gradua√ß√£o Lato Sensu Hospitalar",
                "valor": residencia_pos_hospitalar,
                "pontuacao": 1.0 if residencia_pos_hospitalar else 0.0
            },
            {
                "nome": "Primeiro Curso de Especializa√ß√£o Lato Sensu na √°rea da sa√∫de",
                "valor": primeira_especializacao,
                "pontuacao": 0.5 if primeira_especializacao else 0.0
            },
            {
                "nome": "Segundo Curso de Especializa√ß√£o Lato Sensu na √°rea da sa√∫de",
                "valor": segunda_especializacao,
                "pontuacao": 0.5 if segunda_especializacao else 0.0
            }
        ]
        
        for componente in componentes_grupo3:
            pontuacao_grupo3 += componente['pontuacao']
        
        pontuacao_grupo3 = min(pontuacao_grupo3, grupo3_max)
        
        # Proporcionalmente reduzir as pontua√ß√µes dos componentes se necess√°rio
        if pontuacao_grupo3 < sum(c['pontuacao'] for c in componentes_grupo3):
            fator = pontuacao_grupo3 / sum(c['pontuacao'] for c in componentes_grupo3) if sum(c['pontuacao'] for c in componentes_grupo3) > 0 else 1
            for componente in componentes_grupo3:
                componente['pontuacao'] = round(componente['pontuacao'] * fator, 2)
        
        resultado['grupos'].append({
            "nome": "CURSOS DE STRICTO SENSU, RESID√äNCIA M√âDICA E P√ìS-GRADUA√á√ÉO LATO SENSU CONCLU√çDOS",
            "pontuacao_obtida": pontuacao_grupo3,
            "pontuacao_maxima": grupo3_max,
            "componentes": componentes_grupo3,
            "feedback": ""  # Ser√° preenchido pela IA
        })
        total_pontuacao += pontuacao_grupo3
        
        # Grupo 4 - Cursos de Suporte √† Vida
        grupo4_max = 1.0
        pontuacao_grupo4 = 0.0
        componentes_grupo4 = [
            {
                "nome": "Advanced Cardiac Life Support - ACLS",
                "valor": curso_acls,
                "pontuacao": 0.8 if curso_acls else 0.0
            },
            {
                "nome": "Pediatric Advanced Life Support - PALS",
                "valor": curso_pals,
                "pontuacao": 0.8 if curso_pals else 0.0
            },
            {
                "nome": "Advanced Trauma Life Support - ATLS",
                "valor": curso_atls,
                "pontuacao": 0.8 if curso_atls else 0.0
            },
            {
                "nome": "Advanced Life Support in Obstetrics - ALSO",
                "valor": curso_also,
                "pontuacao": 0.8 if curso_also else 0.0
            },
            {
                "nome": "Pre Hospital Trauma Life Support - PHTLS",
                "valor": curso_phtls,
                "pontuacao": 0.8 if curso_phtls else 0.0
            },
            {
                "nome": "Basic Life Support - BLS",
                "valor": curso_bls,
                "pontuacao": 0.5 if curso_bls else 0.0
            }
        ]
        
        for componente in componentes_grupo4:
            pontuacao_grupo4 += componente['pontuacao']
        
        pontuacao_grupo4 = min(pontuacao_grupo4, grupo4_max)
        
        # Proporcionalmente reduzir as pontua√ß√µes dos componentes se necess√°rio
        if pontuacao_grupo4 < sum(c['pontuacao'] for c in componentes_grupo4):
            fator = pontuacao_grupo4 / sum(c['pontuacao'] for c in componentes_grupo4) if sum(c['pontuacao'] for c in componentes_grupo4) > 0 else 1
            for componente in componentes_grupo4:
                componente['pontuacao'] = round(componente['pontuacao'] * fator, 2)
        
        resultado['grupos'].append({
            "nome": "CURSOS DE SUPORTE √Ä VIDA",
            "pontuacao_obtida": pontuacao_grupo4,
            "pontuacao_maxima": grupo4_max,
            "componentes": componentes_grupo4,
            "feedback": ""  # Ser√° preenchido pela IA
        })
        total_pontuacao += pontuacao_grupo4
        
        # Grupo 5 - Publica√ß√£o Cient√≠fica
        grupo5_max = 2.0
        pontuacao_grupo5 = 0.0
        componentes_grupo5 = [
            {
                "nome": "Primeira publica√ß√£o como autor/coautor de artigos cient√≠ficos em revistas indexadas",
                "valor": primeira_publicacao_artigo,
                "pontuacao": 1.0 if primeira_publicacao_artigo else 0.0
            },
            {
                "nome": "Segunda publica√ß√£o como autor/coautor de artigos cient√≠ficos em revistas indexadas",
                "valor": segunda_publicacao_artigo,
                "pontuacao": 1.0 if segunda_publicacao_artigo else 0.0
            },
            {
                "nome": "Primeira publica√ß√£o como autor/coautor de cap√≠tulos de livros",
                "valor": primeiro_capitulo_livro,
                "pontuacao": 1.0 if primeiro_capitulo_livro else 0.0
            },
            {
                "nome": "Segunda publica√ß√£o como autor/coautor de cap√≠tulos de livros",
                "valor": segundo_capitulo_livro,
                "pontuacao": 1.0 if segundo_capitulo_livro else 0.0
            },
            {
                "nome": "Primeira Organiza√ß√£o de livros",
                "valor": primeira_organizacao_livro,
                "pontuacao": 1.0 if primeira_organizacao_livro else 0.0
            },
            {
                "nome": "Segunda Organiza√ß√£o de livros",
                "valor": segunda_organizacao_livro,
                "pontuacao": 1.0 if segunda_organizacao_livro else 0.0
            }
        ]
        
        for componente in componentes_grupo5:
            pontuacao_grupo5 += componente['pontuacao']
        
        pontuacao_grupo5 = min(pontuacao_grupo5, grupo5_max)
        
        # Proporcionalmente reduzir as pontua√ß√µes dos componentes se necess√°rio
        if pontuacao_grupo5 < sum(c['pontuacao'] for c in componentes_grupo5):
            fator = pontuacao_grupo5 / sum(c['pontuacao'] for c in componentes_grupo5) if sum(c['pontuacao'] for c in componentes_grupo5) > 0 else 1
            for componente in componentes_grupo5:
                componente['pontuacao'] = round(componente['pontuacao'] * fator, 2)
        
        resultado['grupos'].append({
            "nome": "PUBLICA√á√ÉO DE TRABALHOS CIENT√çFICOS",
            "pontuacao_obtida": pontuacao_grupo5,
            "pontuacao_maxima": grupo5_max,
            "componentes": componentes_grupo5,
            "feedback": ""  # Ser√° preenchido pela IA
        })
        total_pontuacao += pontuacao_grupo5
        
        # Grupo 6 - Eventos e Premia√ß√µes
        grupo6_max = 1.0
        pontuacao_grupo6 = 0.0
        componentes_grupo6 = [
            {
                "nome": "Primeira Participa√ß√£o em evento cient√≠fico na Comiss√£o Organizadora",
                "valor": primeira_comissao_organizadora,
                "pontuacao": 0.7 if primeira_comissao_organizadora else 0.0
            },
            {
                "nome": "Segunda Participa√ß√£o em evento cient√≠fico na Comiss√£o Organizadora",
                "valor": segunda_comissao_organizadora,
                "pontuacao": 0.7 if segunda_comissao_organizadora else 0.0
            },
            {
                "nome": "Primeira Premia√ß√£o de trabalhos, TCC, disserta√ß√£o ou tese",
                "valor": primeira_premiacao,
                "pontuacao": 0.7 if primeira_premiacao else 0.0
            },
            {
                "nome": "Segunda Premia√ß√£o de trabalhos, TCC, disserta√ß√£o ou tese",
                "valor": segunda_premiacao,
                "pontuacao": 0.7 if segunda_premiacao else 0.0
            },
            {
                "nome": "Primeira Participa√ß√£o em evento cient√≠fico como palestrante",
                "valor": primeira_palestra,
                "pontuacao": 0.5 if primeira_palestra else 0.0
            },
            {
                "nome": "Segunda Participa√ß√£o em evento cient√≠fico como palestrante",
                "valor": segunda_palestra,
                "pontuacao": 0.5 if segunda_palestra else 0.0
            },
            {
                "nome": "Apresenta√ß√£o de trabalho em evento cient√≠fico",
                "valor": apresentacao_trabalho,
                "pontuacao": 0.5 if apresentacao_trabalho else 0.0
            }
        ]
        
        for componente in componentes_grupo6:
            pontuacao_grupo6 += componente['pontuacao']
        
        pontuacao_grupo6 = min(pontuacao_grupo6, grupo6_max)
        
        # Proporcionalmente reduzir as pontua√ß√µes dos componentes se necess√°rio
        if pontuacao_grupo6 < sum(c['pontuacao'] for c in componentes_grupo6):
            fator = pontuacao_grupo6 / sum(c['pontuacao'] for c in componentes_grupo6) if sum(c['pontuacao'] for c in componentes_grupo6) > 0 else 1
            for componente in componentes_grupo6:
                componente['pontuacao'] = round(componente['pontuacao'] * fator, 2)
        
        resultado['grupos'].append({
            "nome": "EVENTOS CIENT√çFICOS E PREMIA√á√ïES",
            "pontuacao_obtida": pontuacao_grupo6,
            "pontuacao_maxima": grupo6_max,
            "componentes": componentes_grupo6,
            "feedback": ""  # Ser√° preenchido pela IA
        })
        total_pontuacao += pontuacao_grupo6
        
        # Grupo 7 - Profici√™ncia em L√≠nguas
        grupo7_max = 1.0
        pontuacao_grupo7 = 0.0
        componentes_grupo7 = [
            {
                "nome": "Profici√™ncia em l√≠ngua inglesa",
                "valor": proficiencia_ingles,
                "pontuacao": 1.0 if proficiencia_ingles else 0.0
            },
            {
                "nome": "Profici√™ncia em outra l√≠ngua estrangeira",
                "valor": proficiencia_outra_lingua,
                "pontuacao": 1.0 if proficiencia_outra_lingua else 0.0
            },
            {
                "nome": "Profici√™ncia em l√≠ngua portuguesa",
                "valor": proficiencia_portugues,
                "pontuacao": 1.0 if proficiencia_portugues else 0.0
            }
        ]
        
        for componente in componentes_grupo7:
            pontuacao_grupo7 += componente['pontuacao']
        
        pontuacao_grupo7 = min(pontuacao_grupo7, grupo7_max)
        
        # Proporcionalmente reduzir as pontua√ß√µes dos componentes se necess√°rio
        if pontuacao_grupo7 < sum(c['pontuacao'] for c in componentes_grupo7):
            fator = pontuacao_grupo7 / sum(c['pontuacao'] for c in componentes_grupo7) if sum(c['pontuacao'] for c in componentes_grupo7) > 0 else 1
            for componente in componentes_grupo7:
                componente['pontuacao'] = round(componente['pontuacao'] * fator, 2)
        
        resultado['grupos'].append({
            "nome": "PROFICI√äNCIA EM L√çNGUA ESTRANGEIRA",
            "pontuacao_obtida": pontuacao_grupo7,
            "pontuacao_maxima": grupo7_max,
            "componentes": componentes_grupo7,
            "feedback": ""  # Ser√° preenchido pela IA
        })
        total_pontuacao += pontuacao_grupo7
        
        # Limitar a pontua√ß√£o total a 10
        pontuacao_total_final = min(total_pontuacao, 10.0)
        resultado['valor_curriculo'] = pontuacao_total_final
        
        return resultado
    
    except Exception as e:
        logging.error(f"Erro na an√°lise do curr√≠culo: {str(e)}")
        return {
            "error": True,
            "message": f"Ocorreu um erro ao analisar o curr√≠culo: {str(e)}"
        }
    
def gerar_feedback(resultado_calculado):
    try:
        # Construir o prompt base com formato JSON expl√≠cito
        prompt_instrucoes = (
            "Analise os dados de pontua√ß√£o abaixo e gere um feedback detalhado para cada grupo e um feedback geral sobre o curr√≠culo do usu√°rio. Utilize emojis apropriados e mantenha o formato JSON conforme especificado.\n\n"
            "### Dados de Pontua√ß√£o:\n"
            f"{json.dumps(resultado_calculado, ensure_ascii=False, indent=2)}\n\n"
            "### Instru√ß√µes:"
            "\n- Preencha os campos 'feedback' de cada grupo com uma an√°lise detalhada da pontua√ß√£o obtida, pesquisando na internet op√ß√µes para o candidato otimizar o curr√≠culo de acordo com os componentes do grupo. Utilize emojis se necess√°rio."
            "\n- Preencha o campo 'feedback_geral' com uma an√°lise geral do curr√≠culo do usu√°rio, destacando pontos fortes e √°reas para melhoria. Utilize emojis se necess√°rio."
            "\n- RETORNE APENAS o JSON completo, sem qualquer explica√ß√£o adicional."
            "\n- Utilize apenas aspas duplas (\") no JSON."
        )
        
        # Iniciar a sess√£o de chat com o modelo IA existente
        chat_session = model.start_chat(history=[])
        
        # Enviar a mensagem para a IA
        response = chat_session.send_message(prompt_instrucoes)
        
        # Fun√ß√£o para limpar a resposta JSON
        def limpar_json_response(response_text):
            # Remover marcadores de c√≥digo se presentes
            texto = response_text.strip()
            if texto.startswith('```'):
                texto = re.sub(r'^```(?:json)?\s*', '', texto)
            if texto.endswith('```'):
                texto = re.sub(r'```$', '', texto)
            
            # Substituir aspas simples por aspas duplas apenas quando delimitadores de strings
            texto = re.sub(r"(?<!\\)'([^']*(?:\\.[^']*)*)'", r'"\1"', texto)
            
            return texto
        
        # Limpar e processar a resposta
        resposta_limpa = limpar_json_response(response.text)
        print(resposta_limpa)
        
        try:
            resultado_com_feedback = json.loads(resposta_limpa)
            
            # Validar se o JSON est√° no formato esperado
            chaves_requeridas = {'valor_curriculo', 'feedback_geral', 'grupos'}
            if not all(chave in resultado_com_feedback for chave in chaves_requeridas):
                raise ValueError("JSON n√£o cont√©m todas as chaves requeridas")
            
            # Garantir que a pontua√ß√£o total n√£o exceda 10
            resultado_com_feedback['valor_curriculo'] = min(resultado_com_feedback['valor_curriculo'], 10.0)
            
            return resultado_com_feedback
        
        except json.JSONDecodeError as e:
            logging.error(f"Erro ao decodificar JSON: {str(e)}\nResposta recebida: {resposta_limpa}")
            raise ValueError(f"A resposta da IA n√£o est√° no formato JSON esperado: {str(e)}")
    
    except Exception as e:
        logging.error(f"Erro ao gerar feedback com a IA: {str(e)}")
        raise e